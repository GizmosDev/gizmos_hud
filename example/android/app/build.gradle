plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"

    // START: FlutterFire Configuration
    // id "com.google.gms.google-services"
    // id "com.google.firebase.crashlytics"
    // END: FlutterFire Configuration
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Load signing settings
// def keystoreProperties = new Properties()
// def keystorePropertiesFile = rootProject.file('key.properties')
// if (keystorePropertiesFile.exists()) {
//     keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// }

// Load some extra build settings
def buildProperties = new Properties()
def buildPropertiesFile = rootProject.file('build.properties')
if (buildPropertiesFile.exists()) {
    buildPropertiesFile.withReader('UTF-8') { reader ->
        buildProperties.load(reader)
    }
}

def androidApplicationId = buildProperties.getProperty('applicationId')
def androidApplicationIdDev = buildProperties.getProperty('applicationIdDev')

def androidCompileSdkVersion = buildProperties.getProperty('compileSdkVersion')
if (androidCompileSdkVersion == null) {
    androidCompileSdkVersion = flutter.compileSdkVersion
}
def androidMinSdkVersion = buildProperties.getProperty('minSdkVersion')
if (androidMinSdkVersion == null) {
    androidMinSdkVersion = flutter.minSdkVersion
}
def androidTargetSdkVersion = buildProperties.getProperty('targetSdkVersion')
if (androidTargetSdkVersion == null) {
    androidTargetSdkVersion = flutter.targetSdkVersion
}
def androidNdkVersion = buildProperties.getProperty('ndkVersion')
if (androidNdkVersion == null) {
    androidNdkVersion = flutter.ndkVersion
}

android {
    namespace androidApplicationId
    compileSdkVersion androidCompileSdkVersion.toInteger()
    ndkVersion = androidNdkVersion

    def javaVersion = JavaVersion.VERSION_11
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'

        dev {
            res.srcDir 'src/dev/res'
        }

        prod {
            res.srcDir 'src/prod/res'
        }
    }

    defaultConfig {
        minSdkVersion androidMinSdkVersion.toInteger()
        targetSdkVersion androidTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        applicationId androidApplicationId
    }

    signingConfigs {
        release {
            // keyAlias keystoreProperties['keyAlias']
            // keyPassword keystoreProperties['keyPassword']
            // storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            // storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            versionNameSuffix "-dev"
            applicationId androidApplicationIdDev
        }

        prod {
            dimension "environment"
            applicationId androidApplicationId
        }
    }
}

flutter {
    source '../..'
}
